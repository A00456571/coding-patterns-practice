//Minimum Size Subarray Sum
//https://leetcode.com/problems/minimum-size-subarray-sum/
/*
Given an array of positive integers nums and a positive integer target,
return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr]
of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

*/

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        
        int windowEnd = 0, windowSum = 0, minWindow = Integer.MAX_VALUE, windowStart = 0;
        while(windowEnd < nums.length)
        {
            windowSum+=nums[windowEnd];
            while(windowSum>=target)
            {
                minWindow = Math.min(minWindow,(windowEnd - windowStart + 1));
                windowSum-=nums[windowStart++];
            }
            
            windowEnd++;
        }
        return windowStart==0?0:minWindow;
    }
}
